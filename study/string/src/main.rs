fn main() {
    // 不可变的 分配在栈上的
    let s="Hello, world!";
    // 字符串字面量是分配在栈上的不可变，而String是分配堆上的是可变的！！！
    let _s = String::from("Hello, world2!");
    println!("{}", _s);
    {
        // 变量和数据交的方式：移动（Move)
        // 多个变量可以与同一个数据使用独特的方式来交互
        let s1=String::from("shenyang");
        let s2=s1;//在这里这样，rust会废弃s1的所有权，s1的值被移动到s2中，s1的值被清空
        //println!("{}",s1);//这里使用报错，因为s1已经被废弃了
        /*let s1="shenyang";
        let s2=s1;
        像这样就可以，不会报错！！！
        */
        println!("{}",s2);
        // 一个String 由3部分组成：
        // 一个指针，len（长度）,cap（容量）分配在栈上，而字符串的内容被分配在堆上
    }
}
// 所有权是Rust最独特的特性核心特性
// 内存是通过所有权系统来管理的
// 堆和栈是代码在运行时可以傅 的内存空间
// stack 栈  这上面的数据必须拥有固定的大小
// heap 堆  编译时大小未知或者大小可能发生变化的数据必须存放在 heap中
// 访问heap中的数据要比访问stack中的数据慢，多了次指针跳转

/*
所有权规则：
1、rust中的每一个值都有一个对应的变量作为它的所有者；
2、在同一时间内,值有且仅有一个所有者；
3、当所有者离开自己的作用域时,它持有的值就会被释放掉；
*/

/*
内存与分配
rust 在变量离开作用域的时候，会调用一个叫作 drop的特殊函数
rust会在作用域结束的地方自动调用 drop 函数
*/